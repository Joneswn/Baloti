stages: [build, test, deploy, production]

build:
  image: docker:dind
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

test:
  image:
    name: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    entrypoint: ["/bin/sh", "-c"]
  stage: test
  variables:
    POSTGRES_DB: electeez
    POSTGRES_USER: electeez
    POSTGRES_PASSWORD: test
    DB_HOST: postgres
    DB_USER: electeez
    DB_PASS: test
    DB_NAME: electeez
    DB_ENGINE: django.db.backends.postgresql
    MEMCACHED_HOST: memcached
    DJANGO_SETTINGS_MODULE: electeez.electis_settings
  services:
    - name: yourlabs/tezos
      alias: tz
    - name: memcached:1.6-alpine
    - name: postgres:latest
      command:
        - "postgres"
        - "-c"
        - "log_min_duration_statement=300"
  script:
    - pytest -sv

.deploy: &deploy
  image: yourlabs/ansible
  before_script:
    - mkdir -p ~/.ssh; echo "$CI_SSH_KEY" > ~/.ssh/id_ed25519; chmod 700 ~/.ssh; chmod 600 ~/.ssh/*
    - export $(echo $SMTP | xargs)
  script:
    - set -x
    - export HOST=$(echo $CI_ENVIRONMENT_URL | sed s@^.*://@@)
    - export PROTO=$(echo $CI_ENVIRONMENT_URL | sed s@:.*@@)
    - export CI_PROJECT_SLUG=$(echo $CI_PROJECT_NAME | sed s@[/.]@-@g)
    - export ANSIBLE_HOST_KEY_CHECKING=False
    - bigsudo yourlabs.compose
      compose_django_build=
      compose_django_image=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      wait_grep=spawned.uWSGI.worker.1
      $DEPLOY
      deploy@$HOST
      -vv
      | tee deploy.log
    - grep unreachable=0 deploy.log &> /dev/null
    - grep failed=0 deploy.log &> /dev/null

review-deploy-electis:
  <<: *deploy
  stage: test
  environment:
    name: test/${CI_COMMIT_REF_NAME}-electis
    url: https://${CI_ENVIRONMENT_SLUG}.ci.electis.app
  variables:
    DJANGO_SETTINGS_MODULE: electeez.electis_settings
    DEPLOY: >
      compose=docker-compose.yml,docker-compose.traefik.yml
      lifetime=86400
      project=${CI_ENVIRONMENT_SLUG}-electis
  except:
  - tags
  - master
  - neuilly

review-deploy-neuilly:
  <<: *deploy
  stage: test
  environment:
    name: test/${CI_COMMIT_REF_NAME}-neuilly
    url: https://${CI_ENVIRONMENT_SLUG}.ci.electis.app
  variables:
    DJANGO_SETTINGS_MODULE: electeez.neuilly_settings
    DEPLOY: >
      compose=docker-compose.yml,docker-compose.traefik.yml
      lifetime=86400
      project=${CI_ENVIRONMENT_SLUG}-neuilly
  except:
  - tags
  - master
  - neuilly

neuilly-deploy:
  <<: *deploy
  stage: deploy
  environment:
    name: neuilly
    url: https://neuilly.ci.electis.app
  before_script:
    - mkdir -p ~/.ssh; echo "$CI_SSH_KEY" > ~/.ssh/id_ed25519; chmod 700 ~/.ssh; chmod 600 ~/.ssh/*
    - export $(echo $NEUILLY_ENV | xargs)
    - export $(echo $SMTP | xargs)
  variables:
    DEPLOY: >
      compose=docker-compose.yml,docker-compose.traefik.yml,docker-compose.persist.yml
      home=/home/neuilly
  only:
    refs:
      - neuilly

master-deploy:
  <<: *deploy
  stage: deploy
  environment:
    name: master
    url: https://master.ci.electis.app
  before_script:
    - mkdir -p ~/.ssh; echo "$CI_SSH_KEY" > ~/.ssh/id_ed25519; chmod 700 ~/.ssh; chmod 600 ~/.ssh/*
    - export $(echo $MASTER_ENV | xargs)
    - export $(echo $SMTP | xargs)
  variables:
    DEPLOY: >
      compose=docker-compose.yml,docker-compose.traefik.yml,docker-compose.persist.yml
      home=/home/master
  only:
    refs:
      - master

production-deploy:
  <<: *deploy
  before_script:
    - mkdir -p ~/.ssh; echo "$PRODUCTION_SSH_KEY" > ~/.ssh/id_ed25519; chmod 700 ~/.ssh; chmod 600 ~/.ssh/*
    - export $(echo $PROD_ENV | xargs)
    - export $(echo $SMTP | xargs)
  stage: production
  when: manual
  environment:
    name: production
    url: https://electis.app
  variables:
    DEPLOY: >
      compose=docker-compose.yml,docker-compose.traefik.yml,docker-compose.persist.yml
      home=/home/$CI_ENVIRONMENT_NAME
  only:
    refs:
      - master
      - production
